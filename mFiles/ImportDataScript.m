%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Документы\Работа\Биржа\Matlab_Functions\DataSource\Парный трейдинг\SPFB.CHMF_130101_151231.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/01/11 00:45:16

%% Initialize variables.

% Каталог из которого будут загружаться файлы котировок
filedir = 'C:\Документы\Работа\Биржа\ReadyBots\Парный трейдинг\Вариант 3 (SI 5 мин)\DataSource\';
nnfile = 'C:\Документы\Работа\Биржа\ReadyBots\Парный трейдинг\Вариант 3 (SI 5 мин)\mFiles\NNFunc.m'; 

% Имя или часть имени файла который будет таргетами
tarname = 'Si';

filelist = getAllFiles(filedir);


[m, n] = size(filelist);
 %!!!!!!! Кусок имени целевого файла
first = 1;

for first = 1:2
for i=1:m
nfilename = filelist(i);
sfilename = char(nfilename(1));
delimiter = ',';

emp = strfind(sfilename, tarname);
if isempty(emp) && first == 1    
 continue;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(sfilename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells


%% Create output variable
SPFB = cell2mat(raw);
SPFB(1,:) = [];
SPFB(:,1) = [];
SPFB(:,1) = [];
SPFB(:,3) = [];
SPFB(:,3) = [];
SPFB(:,3) = [];
SPFB(:,4) = [];
[x, y] = size(SPFB);
if first == 1 
    Data = zeros(x, m+2);
    Data(:,1) = SPFB(:, 1);
    Data(:,2) = SPFB(:, 2);
    Data(:,3) = SPFB(:, 3);
    Targets   = Data(:, 3);
else
    [datax, datay] = size(Data);
    for datarow = 1:datax  % Копируем по дате и времени
        arrows = find(SPFB == Data(datarow, 1));
        [rx, ry] = size(arrows);
        for rowind = 1:rx
           sprow = arrows(rowind, 1);
           if Data(datarow, 2) == SPFB(sprow, 2)
              Data(datarow, i + 2) = SPFB(sprow, 3);
              break;
           end
       end    
    end 
   for datarow = 1:datax % Если чего то не заполнилось - подставляем из предыдущего
      if Data(datarow, i + 2) == 0
        if datarow == 1
            for tmp = 2:datax
                if Data(tmp, i+2) > 0 
                  Data(datarow, i + 2) = Data(tmp, i+2);
                  break;
                end
            end
        else
            Data(datarow, i + 2) = Data(datarow-1, i + 2);
        end
      end
   end
end

end
end

Data(datax, :) = [];
Data(:, 1) = [];
Data(:, 1) = [];
Targets(1, :) = [];

%% Delete Targets From Data
[x, y] = size(Data);
for dy = 1:y
    if Data(2, dy) == Targets(1, 1)
        Data(:, dy) = [];
    end
end


%% Clear temporary variables
clearvars filename sfilename SPFB delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R arrows datarow datax datay emp filelist first i m n nfilename rowind rx ry sprow tarname tmp x y filedir;


%% Train Neural Network
hiddenLayerSize = [100 48];
trainFcn = 'trainlm';

NN = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
NN.divideParam.trainRatio = 85/100;
NN.divideParam.valRatio = 10/100;
NN.divideParam.testRatio = 5/100;


[NN,tr] = train(NN, Data', Targets');

%% Generate Matlab Function
genFunction(NN, nnfile,'MatrixOnly','yes');